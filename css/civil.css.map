{"version":3,"sources":["civil.scss","modules/_base.scss","modules/_variables.scss","../bower_components/bourbon/app/assets/stylesheets/addons/_font-stacks.scss","modules/_typography.scss","../bower_components/bourbon/app/assets/stylesheets/functions/_tint.scss","../bower_components/bourbon/app/assets/stylesheets/functions/_modular-scale.scss","modules/_functions.scss","../bower_components/bourbon/app/assets/stylesheets/functions/_px-to-rem.scss","../bower_components/bourbon/app/assets/stylesheets/addons/_prefixer.scss","../bower_components/bourbon/app/assets/stylesheets/css3/_linear-gradient.scss","modules/_mixins.scss","../bower_components/bourbon/app/assets/stylesheets/functions/_shade.scss","modules/_buttons.scss","modules/_images.scss","modules/_utilities.scss","modules/_fixes.scss"],"names":[],"mappings":"AAAA,8DAA8D,ACE9D,KACI,sBAAuB,AACvB,cCHiB,CDCf,AAOL,iBACG,kBAAoB,CADf,AAIT,KACI,cCkBiB,ADjBjB,6DET6D,AFU7D,eAAiB,CAHf,AAON,SACI,cAAe,AACf,eAAgB,AAChB,aCvBwB,CDoBlB,AGMU,kBAChB,cCLS,ADMT,oEDhBoE,ACiBpE,gBAAiB,AACjB,iBFvBoC,CEmBhB,AAOxB,GACI,qBEUa,AFTb,gBAAiB,AACjB,mBG5Bc,CHyBd,AAMJ,GACI,qBEEa,AFDb,mBGjCc,CH+Bd,AAKJ,GACI,mBEDa,AFEb,mBGtCc,CHoCd,AAKJ,GACI,qBElBS,AFmBT,mBG3Cc,CHyCd,AAKA,QACA,eFpDiB,AEqDjB,eGhDc,CH8CT,AAKL,SACA,oBECa,AFAb,kBGrDc,AHsDd,wBAA0B,CAHrB,AAQG,eACR,eAAiB,CADJ,AAMT,SACJ,cCpDS,ADqDT,iCAAmC,CAF3B,AAeN,WAEF,mED9EoE,CC4E3D,AAMwB,sCACjC,YAAa,AACb,6BF1DoB,CEwDgB,AAKxC,KACI,8BAAgB,AAChB,2BExCa,CFsCX,AAUH,WAEC,kBFxGoC,AEyGpC,iCAAmC,CAHhC,AAQF,SACD,gFD9FoE,AC+FpE,eI1Ga,CJwGN,AAKX,IACI,sBFrFoB,AEsFpB,kBFrHoC,AEsHpC,qBFtHoC,CEmHnC,AAMD,SACI,gBAAiB,AACjB,SAAW,CAFT,AAMV,KACI,gBFhGsB,AEiGtB,2BE3Ea,CFyEX,AAMN,WACI,kBAAmB,AACnB,kBFvIoC,AEwIpC,sBFxIoC,AEyIpC,iBAAmB,CAJX,AAOP,iBACG,WAAY,AACZ,gCC/HK,ADgIL,kBAAmB,AACnB,SAAU,AACV,SAAU,AACV,iBE7GS,AF8GT,mCAA6B,AAC7B,+BAAyB,AACzB,0BAAqB,CAThB,AAaT,kBACI,cC3IK,AD4IL,gBIrJS,AJsJT,kBAAmB,AACnB,iBG5JU,CHwJN,AAOH,yBACG,qBAAuB,CADjB,AAYV,oCACA,QAAU,CADN,AAKZ,GACI,eAAiB,CADjB,AAIJ,GACI,iBFtLoC,CEqLpC,AAMJ,GAII,gBF/JsB,AEgKtB,SAAU,AACV,iBE3Ia,AF4Ib,uBAA8B,AAC9B,SAAW,CARX,AAcJ,EK7KQ,mDL8KqC,AK9JrC,2CL8JqC,AM/K3C,6BChC8C,ADiC9C,qHAAyC,AACzC,kHAAyB,AChCvB,qBAAsB,APgNtB,aFlLoB,CE8KrB,AO1MW,gBACN,gBAAiB,APgNjB,aQjMK,CDhBS,AEJtB,KFYI,eTXiB,ASYjB,gBTXkB,ASYlB,sBTToC,AWFpC,gBAAiB,AACjB,YAAa,AACb,eAAgB,AAChB,qBAAsB,AACtB,oEVGoE,AUFpE,sBAAuB,AACvB,kBAAoB,CATlB,AAWQ,sBACN,aAAc,AACd,oBAAsB,CAFR,AAQtB,aJcQ,mDEfqC,AF+BrC,2CE/BqC,AAEzC,mBTYoB,ASXpB,aTUyB,CWZf,AFIS,0DACf,mBNJK,AMKL,cTMqB,ASLrB,yBNNK,CMGmB,AEChC,eJSQ,mDEfqC,AF+BrC,2CE/BqC,AAEzC,mBTasB,ASZtB,aTUyB,CWPb,AFDO,gEACf,mBNJK,AMKL,cTMqB,ASLrB,yBNNK,CMGmB,AEOhC,mBJGQ,mDEFqC,AFkBrC,2CElBqC,AAEzC,cTDoB,ASGpB,yBTHoB,CWFJ,AFOG,4EACf,cNlBK,AMmBL,yBNnBK,CMiBmB,AEHhC,qBJDQ,mDEFqC,AFkBrC,2CElBqC,AAEzC,cTAsB,ASEtB,yBTFsB,CWCJ,AFGC,kFACf,cNlBK,AMmBL,yBNnBK,CMiBmB,AGnChC,IACI,cAAe,AACf,YAAa,AACb,qBZAoC,AYCpC,cAAgB,CAJf,AAOL,gBACI,cAAgB,CADH,ACTjB,OACI,iBAAmB,CADf,AAIa,2BACjB,YAAa,AACb,aAAe,CAFU,AAKvB,aACF,UAAY,CADF,ACPN,+FACA,gBAAkB,CADV,AAOR,SACJ,gBdD4B,CcApB,AAIM,oBACd,kBdToC,CcQf","file":"civil.css","sourcesContent":["/*! civil.css | MIT License | github.com/CivilApp/civil.css */\n// Build command:\n// `sass --load-path bower_components/bourbon/app/assets/stylesheets/ --style compressed --watch sass:dist`\n// Or, `gulp sass`\n@import \"bourbon\";\n@import \"modules/variables\";\n@import \"modules/functions\";\n@import \"modules/mixins\";\n@import \"modules/base\";\n@import \"modules/typography\";\n@import \"modules/buttons\";\n@import \"modules/images\";\n@import \"modules/utilities\";\n@import \"modules/fixes\";","// 1. Base defaults\n// Leave body font-size alone: https://goo.gl/KtKtEi\nhtml {\n    box-sizing: border-box;\n    font-size: $root-font-size;\n}\n\n*,\n*:before,\n*:after {\n    box-sizing: inherit;\n}\n\nbody {\n    color: $base-font-colour;\n    font-family: $serif;\n    line-height: 1.5;\n}\n\n// 2. Layout\n.wrapper {\n    margin: 0 auto;\n    max-width: 100%;\n    width: $base-content-width;\n}","$base-content-width: 37.5rem; // 750px\n$root-font-size: 20px; // in px\n$em-base: $root-font-size;\n$base-font-size: 1rem; // 20px\n$base-line-height: 1.5;\n\n// Keyline increments are used for establishing vertical rhythm\n$base-keyline-increment: $base-font-size * $base-line-height;\n$kl-i-1-2: $base-keyline-increment / 2;\n$kl-i-1: $base-keyline-increment;\n$kl-i-3-2: $kl-i-1-2 * 3;\n$kl-i-2: $base-keyline-increment * 2;\n\n// Create a modular scale using $base-font-size and $base-width\n$modular-scale-ratio: $golden;\n$modular-scale-base-1: $base-font-size;\n$modular-scale-base-2: $base-content-width;\n\n// Font sizes for headings\n$h1-font-size: modular-scale(4, $modular-scale-base-1 $modular-scale-base-2);\n$h2-font-size: modular-scale(3, $modular-scale-base-1 $modular-scale-base-2);\n$h3-font-size: modular-scale(2, $modular-scale-base-1 $modular-scale-base-2);\n$h4-font-size: modular-scale(1, $modular-scale-base-1 $modular-scale-base-2);\n$h5-font-size: modular-scale(0, $modular-scale-base-1 $modular-scale-base-2);\n$h6-font-size: modular-scale(-2, $modular-scale-base-1 $modular-scale-base-2);\n\n// Fonts\n$serif: \"Lora\", $georgia;\n$sans-serif: \"Nunito\", $helvetica;\n$monospace: \"Source Code Pro\", $monospace;\n\n// Palette\n$base-colour: #454553;\n$base-colour-inverse: #FEFEFE;\n$primary-colour: #EB586F;\n$secondary-colour: #4AA0D5;\n$base-font-colour: $base-colour;\n\n$grey-light-colour: #CCC; // Thin lines\n$grey-lighter-colour: #EEE; // Thick lines, and highlights","@charset \"UTF-8\";\n\n/// Georgia font stack.\n///\n/// @type List\n\n$georgia: \"Georgia\", \"Cambria\", \"Times New Roman\", \"Times\", serif;\n\n/// Helvetica font stack.\n///\n/// @type List\n\n$helvetica: \"Helvetica Neue\", \"Helvetica\", \"Roboto\", \"Arial\", sans-serif;\n\n/// Lucida Grande font stack.\n///\n/// @type List\n\n$lucida-grande: \"Lucida Grande\", \"Tahoma\", \"Verdana\", \"Arial\", sans-serif;\n\n/// Monospace font stack.\n///\n/// @type List\n\n$monospace: \"Bitstream Vera Sans Mono\", \"Consolas\", \"Courier\", monospace;\n\n/// Verdana font stack.\n///\n/// @type List\n\n$verdana: \"Verdana\", \"Geneva\", sans-serif;\n","/*\n Typography\n\n Core principles:-\n - Modular scale: 20px and 750px at 1.618 (golden ratio)\n   For more info. http://www.modularscale.com/?20,750&px&1.618&web&text\n\n - Vertical rhythm: 1rem (of 20px, root) * 1.5 = 30px\n   Resulting rem spacing 0.9375 (2x), 1.875, 2.8125 (req: margins), 3.75\n\n Contents\n 1. Headings\n 2. Inline elements\n 3. Paragraphs\n 4. Code blocks\n 5. Quote blocks\n 6. Lists\n 7. Thematic break / divider\n 8. Links\n */\n\n// 1. Headings\n// Reset:\n// (a) color -> reduce \"heaviness\" of headings through contrast\n// (b) font-weight -> sets it to normal, as the default (bold) is too overwhelming\n// (c) margin -> sets vertical rhythm for the bottom margin only\nh1, h2, h3, h4, h5, h6 {\n    color: tint($base-font-colour, 3%); // (a)\n    font-family: $sans-serif;\n    font-weight: 400; // (b)\n    margin: 0 0 $kl-i-1; // (c)\n}\n\nh1 {\n    font-size: $h1-font-size;\n    font-weight: 300;\n    line-height: calc-line-height($h1-font-size);\n}\n\nh2 {\n    font-size: $h2-font-size;\n    line-height: calc-line-height($h2-font-size);\n}\n\nh3 {\n    font-size: $h3-font-size;\n    line-height: calc-line-height($h3-font-size);\n}\n\nh4 {\n    font-size: $h4-font-size;\n    line-height: calc-line-height($h4-font-size);\n}\n\nh5, %h5 {\n    font-size: $h5-font-size;\n    line-height: calc-line-height($h5-font-size);\n}\n\nh6, %h6 {\n    font-size: $h6-font-size;\n    line-height: calc-line-height($h6-font-size);\n    text-transform: uppercase; // Improves visibility\n}\n\n// Legibility for smaller headings\n// Ideally, these [level of headings] should never be used\nh4, h5, h6, %h6 {\n    font-weight: 700;\n}\n\n// (a) color -> creating hierarchies (differentiation) through shading\n// (b) text-rendering -> optimise text-rendering for key elements\nh1, h2, h3 {\n    color: tint($base-font-colour, 5%); // (a)\n    text-rendering: optimizeLegibility; // (b)\n}\n\n// 2. Inline elements\n// Inherits heading styles (h5, and h6 respectively)\ntime {\n    @extend %h5;\n}\n\nsmall {\n    @extend %h6;\n}\n\ntime, small {\n    // For <small>, it is theoretically the same as h6\n    font-family: $sans-serif;\n}\n\n// Source: Bootstrap's Reboot\nabbr[title], abbr[data-original-title] {\n    cursor: help;\n    border-bottom: 1px dotted $grey-light-colour;\n}\n\nmark {\n    background: rgba(255, 255, 0, 0.4);\n    padding: modular-scale(-6, $modular-scale-base-1 $modular-scale-base-2) modular-scale(-4, $modular-scale-base-1 $modular-scale-base-2);\n}\n\n// 3. Paragraphs\n// Reset:\n// (a) font-size -> sets the REAL $base-font-size (i.e. not the body's one)\n// (b) margin -> 1 keyline increment bottom (similar to headings)\n// (c) text-rendering -> removes kerning added by the browser\np, %p {\n    //font-size: $base-font-size; // (a)\n    margin: 0 0 $kl-i-1; // (b)\n    text-rendering: optimizeLegibility; // (c)\n}\n\n// 4. Code blocks\n// Much like <img>, it's likely to break vertical rhythm, but we'll ignore it\npre, code {\n    font-family: $monospace;\n    font-size: rem(16); // 16px (code shouldn't be read like paragraphs)\n}\n\npre {\n    border: 1px solid $grey-light-colour;\n    margin: 0 0 $kl-i-1;\n    padding: $kl-i-1-2 $kl-i-1;\n\n    // Set a background and padding for <code> only when it's used in isolation\n    code {\n        background: none;\n        padding: 0;\n    }\n}\n\ncode {\n    background: $grey-lighter-colour;\n    padding: modular-scale(-6, $modular-scale-base-1 $modular-scale-base-2) modular-scale(-4, $modular-scale-base-1 $modular-scale-base-2);\n}\n\n// 5. Quote blocks\nblockquote {\n    font-style: italic;\n    margin: 0 0 $kl-i-1;\n    padding: $kl-i-1-2 $kl-i-1;\n    position: relative;\n\n    // Add a divider at the middle bottom\n    &:after {\n        content: \"\";\n        border-bottom: 1px solid tint($base-font-colour, 3%);\n        position: absolute;\n        bottom: 0;\n        left: 50%;\n        width: modular-scale(8, $modular-scale-base-1 $modular-scale-base-2);\n        -webkit-transform: translateX(-50%);\n        -ms-transform: translateX(-50%);\n        transform: translateX(-50%);\n    }\n\n    // Sources\n    footer {\n        color: tint($base-font-colour, 20%);\n        font-size: rem(16);\n        font-style: normal;\n        line-height: calc-line-height(rem(16));\n        //margin-bottom: $kl-i-1;\n\n        &:before {\n            content: \"\\2014 \\00A0\";\n        }\n    }\n}\n\n// 6. Lists\n// Same as paragraphs\n// Source (<dl>, <dt>, and <dd>): Bootstrap's Reboot\nul, ol, dl {\n    @extend %p;\n\n    ul, ol {\n        margin: 0;\n    }\n}\n\ndt {\n    font-weight: 700;\n}\n\ndd {\n    margin: 0 0 $kl-i-1;\n}\n\n// 7. Thematic break / divider\n// Source: Lingonberry, a WordPress theme by Anders Noren\nhr {\n    $hr-height: modular-scale(-6, $modular-scale-base-1 $modular-scale-base-2);\n    $adjusted-keyline: ($kl-i-1 - $hr-height) / 2 + $kl-i-1;\n\n    background: $grey-lighter-colour;\n    border: 0;\n    height: $hr-height;\n    margin: $adjusted-keyline auto;\n    width: 50%;\n}\n\n// 8. Links\n// Keep underline for links because we are using an \"accent\" colour that is likely to be used on another element\n// It might not be as clean, but it's much easier to distinguish IMHO\na {\n    @include transition(all 0.2s cubic-bezier(0.4, 0, 0.2, 1));\n    @include underline;\n\n    color: $primary-colour;\n\n    &:hover, &:focus {\n        color: shade($primary-colour, 15%);\n    }\n}","@charset \"UTF-8\";\n\n/// Mixes a color with white.\n///\n/// @param {Color} $color\n///\n/// @param {Number (Percentage)} $percent\n///   The amount of white to be mixed in.\n///\n/// @example scss - Usage\n///   .element {\n///     background-color: tint(#6ecaa6, 40%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     background-color: #a8dfc9;\n///   }\n///\n/// @return {Color}\n\n@function tint($color, $percent) {\n  @return mix(#fff, $color, $percent);\n}\n","// Scaling Variables\n$golden:           1.618;\n$minor-second:     1.067;\n$major-second:     1.125;\n$minor-third:      1.2;\n$major-third:      1.25;\n$perfect-fourth:   1.333;\n$augmented-fourth: 1.414;\n$perfect-fifth:    1.5;\n$minor-sixth:      1.6;\n$major-sixth:      1.667;\n$minor-seventh:    1.778;\n$major-seventh:    1.875;\n$octave:           2;\n$major-tenth:      2.5;\n$major-eleventh:   2.667;\n$major-twelfth:    3;\n$double-octave:    4;\n\n$modular-scale-ratio: $perfect-fourth !default;\n$modular-scale-base: em($em-base) !default;\n\n@function modular-scale($increment, $value: $modular-scale-base, $ratio: $modular-scale-ratio) {\n  $v1: nth($value, 1);\n  $v2: nth($value, length($value));\n  $value: $v1;\n\n  // scale $v2 to just above $v1\n  @while $v2 > $v1 {\n    $v2: ($v2 / $ratio); // will be off-by-1\n  }\n  @while $v2 < $v1 {\n    $v2: ($v2 * $ratio); // will fix off-by-1\n  }\n\n  // check AFTER scaling $v2 to prevent double-counting corner-case\n  $double-stranded: $v2 > $v1;\n\n  @if $increment > 0 {\n    @for $i from 1 through $increment {\n      @if $double-stranded and ($v1 * $ratio) > $v2 {\n        $value: $v2;\n        $v2: ($v2 * $ratio);\n      } @else {\n        $v1: ($v1 * $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @if $increment < 0 {\n    // adjust $v2 to just below $v1\n    @if $double-stranded {\n      $v2: ($v2 / $ratio);\n    }\n\n    @for $i from $increment through -1 {\n      @if $double-stranded and ($v1 / $ratio) < $v2 {\n        $value: $v2;\n        $v2: ($v2 / $ratio);\n      } @else {\n        $v1: ($v1 / $ratio);\n        $value: $v1;\n      }\n    }\n  }\n\n  @return $value;\n}\n","/*\n 1. Line height calculator\n Uses a font-size input to calculate the ideal line-height\n The ideal line-height maintains vertical rhythm\n */\n@function calc-line-height($s) {\n    $ratio: ceil($s / $base-keyline-increment);\n\n    @return $ratio * $base-keyline-increment / $s;\n}","// Convert pixels to rems\n// eg. for a relational value of 12px write rem(12)\n// Assumes $em-base is the font-size of <html>\n\n@function rem($pxval) {\n  @if not unitless($pxval) {\n    $pxval: strip-units($pxval);\n  }\n\n  $base: $em-base;\n  @if not unitless($base) {\n    $base: strip-units($base);\n  }\n  @return ($pxval / $base) * 1rem;\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n","@mixin linear-gradient($pos, $g1, $g2: null,\n                       $g3: null, $g4: null,\n                       $g5: null, $g6: null,\n                       $g7: null, $g8: null,\n                       $g9: null, $g10: null,\n                       $fallback: null) {\n  // Detect what type of value exists in $pos\n  $pos-type: type-of(nth($pos, 1));\n  $pos-spec: null;\n  $pos-degree: null;\n\n  // If $pos is missing from mixin, reassign vars and add default position\n  @if ($pos-type == color) or (nth($pos, 1) == \"transparent\")  {\n    $g10: $g9; $g9: $g8; $g8: $g7; $g7: $g6; $g6: $g5;\n    $g5: $g4; $g4: $g3; $g3: $g2; $g2: $g1; $g1: $pos;\n    $pos: null;\n  }\n\n  @if $pos {\n    $positions: _linear-positions-parser($pos);\n    $pos-degree: nth($positions, 1);\n    $pos-spec:   nth($positions, 2);\n  }\n\n  $full: $g1, $g2, $g3, $g4, $g5, $g6, $g7, $g8, $g9, $g10;\n\n  // Set $g1 as the default fallback color\n  $fallback-color: nth($g1, 1);\n\n  // If $fallback is a color use that color as the fallback color\n  @if (type-of($fallback) == color) or ($fallback == \"transparent\") {\n    $fallback-color: $fallback;\n  }\n\n  background-color: $fallback-color;\n  background-image: -webkit-linear-gradient($pos-degree $full); // Safari 5.1+, Chrome\n  background-image: unquote(\"linear-gradient(#{$pos-spec}#{$full})\");\n}\n","// 1. Medium-style underlines\n@mixin underline($color: $primary-colour, $weight: 1px, $offset: 1px) {\n    @include linear-gradient(to top, transparent, transparent $offset, $color $offset, $color ($offset + $weight), transparent ($offset + $weight));\n\n    text-decoration: none;\n\n    &:hover, &:focus {\n        background: none;\n    }\n}\n\n\n// 2. Buttons\n@mixin btn-size($fs: $base-font-size, $lh: $base-line-height, $py: $kl-i-1-2, $px: $kl-i-1) {\n    font-size: $fs;\n    line-height: $lh;\n    padding: $py $px;\n}\n\n@mixin btn-style($fc: $base-colour-inverse, $bg: $primary-colour) {\n    @include transition(all 0.2s cubic-bezier(0.4, 0, 0.2, 1));\n\n    background: $bg;\n    color: $fc;\n\n    &:hover, &:focus, &:active {\n        background: tint($bg, 10%);\n        color: $fc;\n        outline: 3px solid tint($bg, 50%);\n    }\n}\n\n@mixin btn-style-ghost($fc: $primary-colour, $bc: $primary-colour) {\n    @include transition(all 0.2s cubic-bezier(0.4, 0, 0.2, 1));\n\n    color: $fc;\n    // We are using outline instead of border as it will not increase the height\n    outline: 1px solid $bc;\n\n    &:hover, &:focus, &:active {\n        color: tint($bc, 10%);\n        outline: 3px solid tint($bc, 50%);\n    }\n}","@charset \"UTF-8\";\n\n/// Mixes a color with black.\n///\n/// @param {Color} $color\n///\n/// @param {Number (Percentage)} $percent\n///   The amount of black to be mixed in.\n///\n/// @example scss - Usage\n///   .element {\n///     background-color: shade(#ffbb52, 60%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     background-color: #664a20;\n///   }\n///\n/// @return {Color}\n\n@function shade($color, $percent) {\n  @return mix(#000, $color, $percent);\n}\n","// 1. Base button\n// Source (adapted): Bootstrap and Basscss\n.btn {\n    @include btn-size;\n\n    background: none;\n    border: none;\n    cursor: pointer;\n    display: inline-block;\n    font-family: $sans-serif;\n    vertical-align: middle;\n    white-space: nowrap;\n\n    &:hover, &:focus {\n        outline: none;\n        text-decoration: none;\n    }\n}\n\n// 2. Button styles\n// Primary\n.btn-primary {\n    @include btn-style;\n}\n\n// Secondary\n.btn-secondary {\n    @include btn-style($bg: $secondary-colour);\n}\n\n\n// 3. Ghost buttons\n.btn-primary-ghost {\n    @include btn-style-ghost;\n}\n\n.btn-secondary-ghost {\n    @include btn-style-ghost($secondary-colour, $secondary-colour);\n}","// 1. Responsive images\n// They're likely to break vertical rhythm when stretched\n// There's no real around this besides JavaScript\n// .stretch can be used to stretch small images to the container's width\nimg {\n    display: block;\n    height: auto;\n    margin-bottom: $kl-i-1; // 1 keyline increment bottom\n    max-width: 100%;\n}\n\n.img-responsive {\n    min-width: 100%;\n}","// 1. Clearfix\n// Source: HTML5 Boilerplate\n.block {\n    position: relative;\n}\n\n.block:before, .block:after {\n    content: \" \";\n    display: table;\n}\n\n.block:after {\n    clear: both;\n}","// 1. Fix line-height for inline elements in p (for vertical rhythm)\n// Otherwise, the ACTUAL height won't match the COMPUTED height\np, ul, ol {\n    small, time,\n    em, strong {\n        line-height: 100%;\n    }\n}\n\n// 2. Temporary fix for unusual line-height behaviour\n// Computed line-height isn't the same as the displayed line-height\nh1, h2, h3 {\n    line-height: $kl-i-2;\n}\n\nh4, h5, h6, time, small {\n    line-height: $kl-i-1;\n}"],"sourceRoot":"/source/"}